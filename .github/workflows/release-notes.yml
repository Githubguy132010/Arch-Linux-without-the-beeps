name: Update Release Notes

on:
  release:
    types: [published]

jobs:
  update-release-notes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get previous tag
        id: previoustag
        run: |
          # Get current tag from GITHUB_REF
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "CURRENT_TAG=${CURRENT_TAG}" >> $GITHUB_ENV
          
          # Find the previous tag (excluding the current one)
          echo "Finding previous tag before ${CURRENT_TAG}..."
          PREVIOUS_TAG=$(git tag --sort=-committerdate | grep -v "${CURRENT_TAG}" | head -n1 || echo "")
          echo "PREVIOUS_TAG=${PREVIOUS_TAG}" >> $GITHUB_ENV
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, will use all history"
          else
            echo "Previous tag: ${PREVIOUS_TAG}"
          fi
      
      - name: Generate detailed changelog
        id: changelog
        run: |
          # Prepare temporary file for release notes
          TEMP_NOTES_FILE="DETAILED_RELEASE_NOTES.md"
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "First release, listing all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h) by @%an" --reverse HEAD)
          else
            echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
            COMMITS=$(git log --pretty=format:"- %s (%h) by @%an" --reverse $PREVIOUS_TAG..$CURRENT_TAG)
          fi
          
          # Preserve existing release notes from the build workflow
          echo "Downloading current release notes..."
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.CURRENT_TAG }}" | \
                      jq -r '.id')
          
          if [ "$RELEASE_ID" != "null" ] && [ -n "$RELEASE_ID" ]; then
            CURRENT_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" | \
                          jq -r '.body')
            
            # Save current release notes to file
            echo "$CURRENT_BODY" > EXISTING_NOTES.md
            
            # Prepare enhanced release notes with sections
            {
              cat EXISTING_NOTES.md
              echo ""
              echo "---"
              echo ""
              echo "## 📋 Detailed Changes"
              echo ""
              echo "### 🚀 Features & Enhancements"
              echo "$COMMITS" | grep -i -E 'feat|feature|add|enhance|implement' || echo "No features in this release"
              echo ""
              echo "### 🐛 Bug Fixes"
              echo "$COMMITS" | grep -i -E 'fix|bug|issue|problem|resolve' || echo "No bug fixes in this release"
              echo ""
              echo "### 🔧 Maintenance & Refactoring"
              echo "$COMMITS" | grep -i -E 'refactor|chore|docs|test|ci|build|perf|style' || echo "No maintenance changes in this release"
              echo ""
              echo "### 📝 Other Changes"
              echo "$COMMITS" | grep -v -i -E 'feat|feature|add|enhance|implement|fix|bug|issue|problem|resolve|refactor|chore|docs|test|ci|build|perf|style' || echo "No other changes in this release"
              echo ""
              echo "---"
              if [ -n "$PREVIOUS_TAG" ]; then
                echo "📦 Full changelog: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)"
              fi
            } > $TEMP_NOTES_FILE
          else
            # If no existing notes found, create new ones
            {
              echo "## Changes in $CURRENT_TAG"
              echo ""
              echo "### 🚀 Features & Enhancements"
              echo "$COMMITS" | grep -i -E 'feat|feature|add|enhance|implement' || echo "No features in this release"
              echo ""
              echo "### 🐛 Bug Fixes"
              echo "$COMMITS" | grep -i -E 'fix|bug|issue|problem|resolve' || echo "No bug fixes in this release"
              echo ""
              echo "### 🔧 Maintenance & Refactoring"
              echo "$COMMITS" | grep -i -E 'refactor|chore|docs|test|ci|build|perf|style' || echo "No maintenance changes in this release"
              echo ""
              echo "### 📝 Other Changes"
              echo "$COMMITS" | grep -v -i -E 'feat|feature|add|enhance|implement|fix|bug|issue|problem|resolve|refactor|chore|docs|test|ci|build|perf|style' || echo "No other changes in this release"
              echo ""
              echo "---"
              if [ -n "$PREVIOUS_TAG" ]; then
                echo "📦 Full changelog: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)"
              fi
            } > $TEMP_NOTES_FILE
          fi
          
          cat $TEMP_NOTES_FILE