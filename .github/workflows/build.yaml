name: Build ISO

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Run the workflow every day at midnight
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - '**.md'
      - '.gitignore'

env:
  DOCKER_BUILDKIT: 1
  ISO_FILENAME: Arch.iso

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Set a timeout to prevent hung builds

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up environment variables
        id: env
        run: |
          echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "CACHE_KEY=$(date +'%Y-%m')" >> $GITHUB_ENV

      - name: Cache Pacman packages
        uses: actions/cache@v3
        with:
          path: /tmp/pacman-cache
          key: pacman-${{ env.CACHE_KEY }}
          restore-keys: |
            pacman-

      - name: Set up Arch Linux Container
        run: |
          mkdir -p /tmp/pacman-cache
          docker run --privileged --name arch-container -d \
            -v ${{ github.workspace }}:/workdir \
            -v /tmp/pacman-cache:/var/cache/pacman/pkg \
            archlinux:latest sleep infinity

      - name: Update and Install Dependencies
        run: |
          docker exec arch-container bash -c "
            set -euo pipefail
            pacman -Sy --noconfirm
            pacman -S --noconfirm --needed git archiso grub curl jq gnupg
          "

      - name: Build ISO
        id: build
        run: |
          docker exec arch-container bash -c "
            set -euo pipefail
            cd /workdir
            # Cleanup any previous builds
            rm -rf workdir/ out/
            # Build the ISO with verbose output
            mkarchiso -v -w workdir/ -o out/ . || {
              echo 'ISO build failed!'
              exit 1
            }
          "

      - name: Generate Checksums
        run: |
          docker exec arch-container bash -c "
            cd /workdir/out
            sha256sum *.iso > sha256sums.txt
            sha512sum *.iso > sha512sums.txt
          "

      - name: Rename and Move ISO
        run: |
          docker exec arch-container bash -c "
            cd /workdir/out
            for f in *.iso; do
              mv \"\$f\" \"arch-linux-no-beeps-${{ env.VERSION }}.iso\"
            done
          "

      - name: Upload ISO Artifact
        uses: actions/upload-artifact@v3
        with:
          name: arch-linux-no-beeps-${{ env.VERSION }}
          path: |
            ${{ github.workspace }}/out/*.iso
            ${{ github.workspace }}/out/sha*sums.txt
          retention-days: 5

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/main'
        with:
          tag_name: v${{ env.VERSION }}
          name: "Arch Linux No Beeps v${{ env.VERSION }}"
          body: |
            ðŸš€ Arch Linux ISO without system beeps (build ${{ env.DATE }})
            
            ### Changes
            - Automatic daily build
            - System beeps disabled
            - ISO SHA256 and SHA512 checksums added
            
            ### Download
            - Download the ISO and verify checksums before use
            
            ### Checksums
            SHA256 and SHA512 checksums are available in the uploaded files.
          draft: false
          prerelease: false
          files: |
            ${{ github.workspace }}/out/*.iso
            ${{ github.workspace }}/out/sha*sums.txt

      - name: Clean Up
        if: always()
        run: |
          docker stop arch-container || true
          docker rm arch-container || true
          rm -rf workdir/ out/

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::ISO build failed! Check the logs for more details."