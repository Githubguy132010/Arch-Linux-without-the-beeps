name: Build ISO

on:
  # Allows manual triggering
  workflow_dispatch:
  # Run daily at midnight UTC
  schedule:
    - cron: '0 0 * * *'

env:
  DOCKER_BUILDKIT: 1
  PACMAN_CACHE: /tmp/pacman-cache
  WORKSPACE: /workdir
  BUILD_DIR: /workdir/work
  OUTPUT_DIR: /workdir/out

jobs:
  build:
    name: Build Arch Linux ISO
    runs-on: ubuntu-latest
    timeout-minutes: 180  # Extended timeout for the full build process

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Setup Environment
        run: |
          echo "Setting up build environment"
          mkdir -p out work
          echo "ISO_DATE=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "RELEASE_TAG=v$(date +'%Y.%m.%d')" >> $GITHUB_ENV

      - name: Cache Pacman packages
        uses: actions/cache@v4
        with:
          path: ${{ env.PACMAN_CACHE }}
          key: archlinux-pacman-v2-${{ runner.os }}-${{ hashFiles('packages.x86_64', 'bootstrap_packages.x86_64', 'pacman.conf') }}
          restore-keys: |
            archlinux-pacman-v2-${{ runner.os }}-
            archlinux-pacman-v2-

      - name: Set up Docker Container
        run: |
          # Ensure package cache directory exists
          mkdir -p ${{ env.PACMAN_CACHE }}
          # Build the Docker image with proper error handling
          docker build -t arch-iso-builder -f dockerfile . || {
            echo "::error::Failed to build Docker image"
            exit 1
          }

      - name: Build ISO
        run: |
          # Run the ISO build with privileged mode to allow loop device mounting
          # The 'build' command is passed to the entrypoint script
          docker run --rm --privileged \
            -v ${{ github.workspace }}:${{ env.WORKSPACE }} \
            -v ${{ env.PACMAN_CACHE }}:/var/cache/pacman/pkg \
            arch-iso-builder build out work || {
              echo "::error::ISO build failed"
              exit 1
            }

      - name: Generate Checksums
        run: |
          cd out
          # Check if ISO file exists
          if ! ls *.iso &>/dev/null; then
            echo "::error::No ISO file found in output directory"
            exit 1
          fi
          
          # Get the ISO filename
          ISO_FILE=$(ls *.iso | head -n1)
          echo "ISO_FILENAME=$ISO_FILE" >> $GITHUB_ENV
          
          # Create checksums
          sha256sum "$ISO_FILE" > $ISO_FILE.sha256
          sha512sum "$ISO_FILE" > $ISO_FILE.sha512
          
          # Rename ISO for better identification
          RENAMED_ISO="archlinux-nobeep-${{ env.ISO_DATE }}.iso"
          mv "$ISO_FILE" "$RENAMED_ISO"
          echo "RENAMED_ISO=$RENAMED_ISO" >> $GITHUB_ENV

      - name: Generate Package Updates for Release Notes
        run: |
          # Create directory for package tracking output
          mkdir -p /tmp/package-versions
          
          # Run package tracking script with proper error handling
          echo "Running package tracking script..."
          docker run --rm \
            -v ${{ github.workspace }}:${{ env.WORKSPACE }} \
            -v /tmp/package-versions:/tmp/package-versions \
            arch-iso-builder shell "cd ${{ env.WORKSPACE }} && ./scripts/package_tracking/track_package_updates.sh" || {
              echo "::warning::Package tracking failed, continuing with simplified release notes"
              # Ensure the directory exists even if command failed
              mkdir -p /tmp/package-versions
            }
          
          # Prepare release notes
          echo "Generating release notes"
          {
            echo "# Arch Linux No Beep ISO - ${{ env.ISO_DATE }}"
            echo ""
            echo "## 📦 Automated Build"
            echo ""
            echo "This ISO was automatically built on $(date +'%Y-%m-%d %H:%M:%S %Z')"
            echo ""
            echo "### 🔧 Changes"
            echo ""
            echo "- Updated base packages to latest Arch Linux versions"
            echo "- All system beeps disabled by default"
            echo "- Performance optimizations for faster boot"
            echo ""
            if [ -f "/tmp/package-versions/package_updates.md" ]; then
              echo "### 📊 Package Updates"
              echo ""
              cat "/tmp/package-versions/package_updates.md"
            else
              echo "No detailed package information available for this build."
            fi
          } > release_notes.md
          
          # Verify release notes were created
          if [ ! -s release_notes.md ]; then
            echo "::warning::Release notes file is empty, creating fallback content"
            echo "# Arch Linux No Beep ISO - ${{ env.ISO_DATE }}" > release_notes.md
            echo "" >> release_notes.md
            echo "This ISO was automatically built on $(date +'%Y-%m-%d %H:%M:%S %Z')" >> release_notes.md
          fi

          # Ensure DETAILED_RELEASE_NOTES.md is created
          cp release_notes.md DETAILED_RELEASE_NOTES.md

      - name: Generate Detailed Changelog
        id: generate_detailed_changelog
        run: |
          echo "Starting detailed changelog generation..."
          CURRENT_TAG="${{ env.RELEASE_TAG }}"
          echo "Current tag for release: $CURRENT_TAG"

          # Fetch all tags from remote to ensure we have the latest state
          git fetch --tags
          
          # Determine PREVIOUS_TAG
          # Exclude the current tag from the list of potential previous tags
          # Sort tags in descending order (v:refname for version sort)
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -v "^$CURRENT_TAG$" | head -n1 || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found or it's the first release. Changelog will be from the beginning of history."
            # Use --reverse to list oldest first for better readability in release notes
            COMMITS=$(git log --pretty=format:"- %s (%h) by @%an" --reverse HEAD)
          else
            echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG (effectively HEAD)"
            # Use --reverse to list oldest first
            COMMITS=$(git log --pretty=format:"- %s (%h) by @%an" --reverse $PREVIOUS_TAG..HEAD)
          fi

          if [ -z "$COMMITS" ]; then
            echo "No commits found for the range. Setting a default message."
            COMMITS="No specific code changes identified in this release."
          fi

          CHANGELOG_DETAILS_FILE="changelog_details.md"
          echo "Generating changelog details into $CHANGELOG_DETAILS_FILE..."
          {
            echo ""
            echo "---"
            echo ""
            echo "## 📋 Detailed Changes from Git Log"
            echo ""
            echo "### 🚀 Features & Enhancements"
            echo "$COMMITS" | grep -i -E 'feat|feature|add|enhance|implement' || echo "_No specific features/enhancements in this update based on commit messages._"
            echo ""
            echo "### 🐛 Bug Fixes"
            echo "$COMMITS" | grep -i -E 'fix|bug|issue|problem|resolve' || echo "_No specific bug fixes in this update based on commit messages._"
            echo ""
            echo "### 🔧 Maintenance & Refactoring"
            echo "$COMMITS" | grep -i -E 'refactor|chore|docs|test|ci|build|perf|style' || echo "_No specific maintenance/refactoring in this update based on commit messages._"
            echo ""
            echo "### 📝 Other Changes"
            # The OR condition ensures that if grep finds nothing, it still prints the fallback message.
            # This grep looks for lines NOT matching the previous categories.
            echo "$COMMITS" | grep -v -i -E 'feat|feature|add|enhance|implement|fix|bug|issue|problem|resolve|refactor|chore|docs|test|ci|build|perf|style' || echo "_No other specific changes in this update based on commit messages._"
            # If COMMITS was the default "No specific code changes..." message, the above grep -v would still output it.
            # We add a specific check here to ensure if COMMITS was "No specific code changes...", it's handled gracefully by "Other Changes"
            if [ "$COMMITS" = "No specific code changes identified in this release." ]; then
              echo "$COMMITS"
            fi
            echo ""
            echo "---"
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "📦 Full commit history: [$PREVIOUS_TAG...${CURRENT_TAG} (HEAD)](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ github.sha }})"
            else
              echo "📦 Full commit history up to this release: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
            fi
          } > "$CHANGELOG_DETAILS_FILE"

          echo "Appending $CHANGELOG_DETAILS_FILE to DETAILED_RELEASE_NOTES.md"
          cat "$CHANGELOG_DETAILS_FILE" >> DETAILED_RELEASE_NOTES.md
          rm -f "$CHANGELOG_DETAILS_FILE" # Clean up temp file
          echo "Detailed changelog generation complete."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            out/${{ env.RENAMED_ISO }}
            out/${{ env.RENAMED_ISO }}.sha256
            out/${{ env.RENAMED_ISO }}.sha512
          name: "Arch Linux No Beeps - ${{ env.ISO_DATE }}"
          tag_name: ${{ env.RELEASE_TAG }}
          body_path: DETAILED_RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean Up
        if: always()
        run: |
          sudo rm -rf out/ work/
          docker image rm arch-iso-builder || true